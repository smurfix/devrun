#!/usr/bin/python3

from asyncio import get_event_loop,Event, Protocol

class Conn(Protocol):
    def __init__(self,processor, first):
        self.processor = processor
        self.first = first

    def connection_made(self,transport):
        super().connection_made(transport)
        self.transport = transport
        if self.first:
            self.processor.main = self
        else:
            self.processor.jobs.add(self)

    def connection_lost(self,exc):
        super().connection_lost(exc)
        if self.first:
            self.processor.main = None
            self.processor.evt.set()
        else:
            self.processor.jobs.remove(self)

    def data_received(self, d):
        if self.first:
            for x in self.processor.jobs:
                x.write(d)
        else:
            self.processor.main.write(d)

    def write(self,d):
        self.transport.write(d)

class Outer(object):
    def __init__(self,processor):
        self.processor = processor
        processor.loop.add_reader(sys.stdin.fileno(), self.read_stdin)
        processor.jobs.add(self)
    def close(self):
        pass
    def write(self,d):
        sys.stdout.write(d.decode('utf-8'))
    def read_stdin(self):
        r = sys.stdin.readline().strip() + '\r\n'
        r = r.encode('utf-8')
        if self.processor.main:
            self.processor.main.write(r)
        for x in self.processor.jobs:
            if isinstance(x,Outer):
                continue
            x.write(r)

class Processor(object):
    def __init__(self, loop=None):
        self.loop = loop
        self.jobs = set()
        self.main = None
        self.evt = Event(loop=loop)

    async def process(self, *args):
        assert args
        io = None

        first = True
        for arg in args:
            if arg == '-':
                assert io is None
                io = Outer(self)
                continue
            try:
                host,port = arg.split(':',1)
            except ValueError:
                host = arg
                port = 50757
            else:
                port = int(port)
                assert port > 0
            c = await self.loop.create_connection(lambda: Conn(self,first), host,port)
            first = False
        await self.evt.wait()
        for j in self.jobs:
            j.transport.close()


def main(*args):
    global loop
    loop = get_event_loop()
    p = Processor(loop)
    loop.run_until_complete(p.process(*args))

if __name__ == "__main__":
    import sys
    try:
        main(*sys.argv[1:])
    except KeyboardInterrupt:
        pass

